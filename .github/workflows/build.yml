name: CI with SonarCloud

on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  build-and-analyze:
    name: Build, Test and SonarCloud Analysis
    runs-on: windows-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET 8
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 8.0.x

      - name: Setup JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'zulu'

      - name: Cache SonarCloud scanner
        uses: actions/cache@v4
        with:
          path: .\.sonar\scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner

      - name: Install SonarScanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        shell: powershell
        run: |
          if (-Not (Test-Path ".\.sonar\scanner")) { New-Item -Path .\.sonar\scanner -ItemType Directory }
          dotnet tool update dotnet-sonarscanner --tool-path .\.sonar\scanner

      - name: Begin SonarCloud Analysis
        shell: powershell
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          .\.sonar\scanner\dotnet-sonarscanner begin `
            /k:"MiskinichJonathanJ_MenuDigitalAPI" `
            /o:"miskinichjonathanj" `
            /d:sonar.login="${{ secrets.SONAR_TOKEN }}" `
            /d:sonar.cs.opencover.reportsPaths="UnitTest/coverage/coverage.opencover.xml `
            /d:sonar.exclusions="**/Migrations/**,**/*Migrations/*.cs,**/Seeds/**,**/*Seed*.cs,**/Infrastructure/**/Persistence/**/Seed*.cs" `
            /d:sonar.coverage.exclusions="**/Migrations/**,**/Seeds/**,**/*Seed*.cs"

      - name: Restore dependencies
        run: dotnet restore

      - name: Build solution
        run: dotnet build --no-restore

      - name: Run tests with coverage
        run: |
          dotnet test UnitTest/UnitTest.csproj `
            /p:CollectCoverage=true `
            /p:CoverletOutput=coverage/coverage.opencover.xml `
            /p:CoverletOutputFormat=opencover
        
      - name: Restore local .NET tools
        run: dotnet tool restore

      - name: Generate HTML coverage report
        shell: powershell
        run: dotnet tool run reportgenerator -reports:UnitTest/coverage/coverage.opencover.xml -targetdir:UnitTest/coverage-report -reporttypes:Html

      - name: End SonarCloud Analysis
        shell: powershell
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: .\.sonar\scanner\dotnet-sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"
